[tool.poetry]
name = "cockatoo-ai"
version = "0.1.0"
description = "An exclusive language trainer for you to help escalate your language to next level with joy and fun."
authors = ["Wen-Kai Chung <wkaichungtw@gmail.com>", "John Lee <puremonkey2007@gmail.com>", "Louis <louis120913@gmail.com>", "Demmi Yu <yuchaodemmi@gmail.com>"]
license = "Apache 2.0"
readme = "README.md"
packages = [
    {include = "cockatoo"},
    {include = "src"}
]

[tool.poetry.dependencies]
python = "^3.12"
pandas = "^2.1.4"
numpy = "^1.26.3"

[tool.poetry.group.dev.dependencies]
sphinx = "^7.2.6"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
addopts = [
    "--cache-clear", 
    "--color=auto",
    "--tb=line",
    "-ra"
]

[tool.coverage.run]
branch = true
source = ["src/"]

[tool.coverage.report]
show_missing = true
# coverage threshold 
fail_under=90
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "if self[.]debug",

    # Don't complain for trivial parts
    "def __repr__",
    "def __hash__",
    "def __str__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",

    # Don't complain about abstract methods, they aren't run:
    "@(abc[.])?abstractmethod",
]